{"version":3,"sources":["components/Container/index.js","components/Jumbotron/index.js","components/GameCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","Jumbotron","topScore","currentScore","gameMessage","GameCard","id","type","onClick","clickedImage","src","image","alt","name","shuffle","require","imgArray","App","state","clicked","images","gameOver","shuffleImageArray","i","length","push","console","log","includes","resetGame","increaseScore","setState","score","points","this","map","character","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wtCAQeA,MANf,SAAmBC,GACf,OAAO,yBAAKC,UAAU,+DACjBD,EAAME,WC0BAC,MA5Bf,SAAmBH,GACf,OACI,yBAAKC,UAAU,wDACX,yBAAKA,UAAU,aACX,6BACI,wBAAIA,UAAU,SAAd,sBAEJ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,OACX,uBAAGA,UAAU,QAAb,sBAEJ,yBAAKA,UAAU,YACX,uBAAGA,UAAU,mBAAb,cACA,uBAAGA,UAAU,mBAAb,WAEJ,yBAAKA,UAAU,gBACX,uBAAGA,UAAU,aAAaD,EAAMI,UAChC,uBAAGH,UAAU,QAAQD,EAAMK,gBAGnC,6BACI,uBAAGJ,UAAU,sCAAsCD,EAAMM,iBCV9DC,MAXf,SAAkBP,GACd,OAEI,yBAAKC,UAAU,gDAAgDO,GAAIR,EAAMQ,IACrE,4BAAQC,KAAK,SAASR,UAAU,MAAMS,QAAS,kBAAMV,EAAMW,aAAaX,EAAMQ,MAC1E,yBAAKI,IAAKZ,EAAMa,MAAOZ,UAAU,oBAAoBa,IAAKd,EAAMe,U,OCD5EC,EAAUC,EAAQ,IAElBC,EAAW,GAgIAC,E,2MA1HbC,MAAQ,CACNf,aAAc,EACdD,SAAU,EACVE,YAAa,GACbe,QAAS,GACTC,SACAC,UAAU,G,EAmBZC,kBAAoB,WAClBN,EAAW,GAEX,IAAK,IAAIO,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IACjCP,EAASS,KAAKL,EAAOG,IAGvBT,EAAQE,I,EAOVP,aAAe,SAACH,GACdoB,QAAQC,IAAR,gBAAqBrB,EAArB,cACI,EAAKY,MAAMC,QAAQS,SAAStB,GAO9B,EAAKuB,aANL,EAAKC,gBACL,EAAKZ,MAAMC,QAAQM,KAAKnB,GACxB,EAAKyB,SAAS,CACZV,UAAU,M,EAUhBS,cAAgB,WACd,IAAIE,EAAQ,EAAKd,MAAMf,aAAe,EACnC6B,IAAU,EAAKd,MAAME,OAAOI,OAC7B,EAAKO,SAAS,CACZ7B,SAAU8B,EACV7B,aAAc,EACdC,YAAa,yCACbe,QAAS,GACTC,SACAC,UAAU,IAEJW,EAAQ,EAAKd,MAAMhB,SAC3B,EAAK6B,SAAS,CACZ7B,SAAS8B,EACT7B,aAAc6B,EACd5B,YAAa,oBAGf,EAAK2B,SAAS,CACZ5B,aAAc6B,EACd5B,YAAa,aAGjB,EAAKkB,qB,EAKPO,UAAY,WACV,EAAKE,SAAS,CACZE,OAAQ,EACR9B,aAAc,EACdD,SAAU,EAAKgB,MAAMhB,SACrBE,YAAa,yCACbe,QAAS,GACTC,SACAC,UAAU,IAGZ,EAAKC,qB,mFAjFL,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IACjCP,EAASS,KAAKL,EAAOG,IAGvBT,EAAQE,GAERkB,KAAKH,SAAS,CAAC3B,YAAa,yE,+BA+ErB,IAAD,OACN,OACE,6BACE,kBAAC,EAAD,CACED,aAAc+B,KAAKhB,MAAMf,aACzBD,SAAUgC,KAAKhB,MAAMhB,SACrBE,YAAa8B,KAAKhB,MAAMd,cAE1B,kBAAC,EAAD,KACGY,EAASmB,KAAI,SAAAC,GAAS,OACrB,kBAAC,EAAD,CACEzB,MAAOyB,EAAUzB,MACjBE,KAAMuB,EAAUvB,KAChBP,GAAI8B,EAAU9B,GACdG,aAAc,EAAKA,wB,GApHf4B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cf5dd943.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Container(props){\n    return <div className=\"container col-sm-12 d-flex flex-wrap justify-content-center\">\n        {props.children}\n    </div>;\n};\n\nexport default Container;","import React from 'react';\n\nfunction Jumbotron(props) {\n    return(\n        <div className=\"jumbotron jumbotron-fluid bg-dark text-light m-0 p-0\">\n            <div className=\"container\">\n                <row>\n                    <h1 className=\"title\">Clicky Caricature</h1>\n                </row>\n                <row className=\"d-flex flex-row\">\n                    <div className=\"col\">\n                        <p className=\"lead\">Celebrity Edition</p>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <p className=\"lead text-right\">Top Score:</p>\n                        <p className=\"lead text-right\">Score:</p>\n                    </div>\n                    <div className=\"col-sm-1 p-0\">\n                        <p className=\"lead ml-0\">{props.topScore}</p>\n                        <p className=\"lead\">{props.currentScore}</p>\n                    </div>\n                </row>\n                <row>\n                    <p className=\"lead game-message text-center mb-0\">{props.gameMessage}</p>\n                </row>\n            </div>\n        </div>\n    );\n};\n\nexport default Jumbotron;\n\n\n    ","import React from 'react';\n\nfunction GameCard(props){\n    return(\n        \n        <div className=\"col-xs-4 col-sm-3 col-lg-2 text-dark p-0 mt-2\" id={props.id}>\n            <button type=\"button\" className=\"btn\" onClick={() => props.clickedImage(props.id)}>\n                <img src={props.image} className=\"img-fluid rounded\" alt={props.name} />\n            </button>\n        </div>     \n    );\n};\n\nexport default GameCard;","import React, {Component} from 'react';\nimport './App.css';\nimport Container from './components/Container';\nimport Jumbotron from './components/Jumbotron';\nimport GameCard from './components/GameCard';\nimport images from './images.json';\nlet shuffle = require('shuffle-array');\n\nlet imgArray = [];\n\nclass App extends Component {\n\n\n  //  Starting/Reset Values\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    gameMessage: \"\",\n    clicked: [],\n    images,\n    gameOver: false\n  };\n\n\n\n  // Render first set of images and starting game message\n  componentDidMount() {\n    for (let i = 0; i < images.length; i++) {\n      imgArray.push(images[i]);\n    };\n\n    shuffle(imgArray);\n\n    this.setState({gameMessage: \"Click each image one time to win. If you click on twice, you lose.\"})\n  };\n\n\n\n  // Shuffle and Redraw Images\n  shuffleImageArray = () => {\n    imgArray = [];\n\n    for (let i = 0; i < images.length; i++) {\n      imgArray.push(images[i]);\n    };\n\n    shuffle(imgArray);\n\n  }\n\n\n\n  // When image is clicked, increment score by 1, add image to array. \n  clickedImage = (id) => {\n    console.log(`image ${id} clicked!`);\n    if(!this.state.clicked.includes(id)){\n      this.increaseScore();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.resetGame();\n    }\n  };\n\n\n\n  // Increase Score by 1\n  increaseScore = () => {\n    let score = this.state.currentScore + 1;\n    if(score === this.state.images.length) {\n      this.setState({\n        topScore: score,\n        currentScore: 0,\n        gameMessage: \"You win! Click an image to play again!\",\n        clicked: [],\n        images,\n        gameOver: false\n      });\n    } else if(score > this.state.topScore) {\n      this.setState({\n        topScore:score,\n        currentScore: score,\n        gameMessage: \"New High Score!\"\n      });\n    } else {\n      this.setState({\n        currentScore: score,\n        gameMessage: \"Correct!\"\n      });\n    }\n    this.shuffleImageArray();\n  };\n\n\n  // Lose and Reset Game\n  resetGame = () => {\n    this.setState({\n      points: 0,\n      currentScore: 0,\n      topScore: this.state.topScore,\n      gameMessage: \"Wrong! Click an image to start over...\",\n      clicked: [],\n      images,\n      gameOver: true\n    });\n    // console.log(\"Game Over\");\n    this.shuffleImageArray();\n  };\n\n\n  render(){\n    return (\n      <div>\n        <Jumbotron \n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n          gameMessage={this.state.gameMessage}\n        />\n        <Container>\n          {imgArray.map(character =>\n            <GameCard\n              image={character.image}\n              name={character.name}\n              id={character.id}\n              clickedImage={this.clickedImage}\n            />\n          )}\n        </Container>\n      </div >\n    );\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}